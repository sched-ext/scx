name: build-and-test

on:
  workflow_call:
    inputs:
      repo-name:
        type: string

jobs:
  list-tests:
    runs-on: ${{ github.repository_owner == 'sched-ext' && fromJSON('[ "self-hosted", "linux", "x64" ]') || 'ubuntu-latest' }}
    outputs:
      matrix: ${{ steps.output.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: ./.github/actions/install-nix
        with:
          cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: List tests
        id: output
        run: nix run ./.github/include#list-integration-tests -- "${{ inputs.repo-name }}" >> $GITHUB_OUTPUT

  integration-test:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    needs: list-tests
    strategy:
          matrix:
            scheduler: ${{ fromJson(needs.list-tests.outputs.matrix) }}
          fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: ./.github/actions/install-nix
        with:
          cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Install Veristat
        run: nix-env -i $(nix build --no-link --print-out-paths ./.github/include#veristat)

      # prevent cache permission errors
      - run: sudo chown root /usr/bin/tar && sudo chmod u+s /usr/bin/tar
      - uses: Swatinem/rust-cache@v2
        with:
          # ignore the flags here, this is a rust cache
          key: ${{ matrix.scheduler.name }}
          prefix-key: "4"
      - uses: ./.github/actions/install-deps-action

      - name: Load kernel
        run: |
          if [ -n "${{ matrix.scheduler.kernel }}" ]; then
            KERNEL_NAME="${{ matrix.scheduler.kernel }}"
          elif [ -n "${{ inputs.repo-name }}" ]; then
            KERNEL_NAME="${{ inputs.repo-name }}"
          else
            KERNEL_NAME=$(cargo metadata --format-version 1 --no-deps \
              | jq -r --arg pkg "${{ matrix.scheduler.name }}" '
                  .packages[]?
                  | select(.name == $pkg)
                  | .metadata.scx?.ci?.kernel?.default
                  // "sched_ext/for-next"
              ')
          fi

          echo "KERNEL_NAME=$KERNEL_NAME" >> $GITHUB_ENV
          echo "KERNEL_STORE_PATH=$(nix build --no-link --print-out-paths ./.github/include#"kernel_${KERNEL_NAME}")" >> $GITHUB_ENV
          echo "KERNEL_HEADERS_STORE_PATH=$(nix build --no-link --print-out-paths ./.github/include#"kernel_${KERNEL_NAME}".headers)" >> $GITHUB_ENV

      # cache virtiofsd (goes away w/ 24.04)
      - name: Cache virtiofsd
        id: cache-virtiofsd
        uses: actions/cache@v4
        with:
          path: |
            /usr/lib/virtiofsd
          key: virtiofsd-binary
      - if: ${{ steps.cache-virtiofsd.outputs.cache-hit != 'true' }}
        run: cargo install virtiofsd && sudo cp -a ~/.cargo/bin/virtiofsd /usr/lib/

      # The actual build:
      - run: meson setup build -Dkernel=$KERNEL_STORE_PATH/bzImage -Dkernel_headers=$KERNEL_HEADERS_STORE_PATH -Denable_stress=true -Dvng_rw_mount=true -Dextra_sched_args=" ${{ matrix.scheduler['flags'] }}"
      - run: meson compile -C build ${{ matrix.scheduler['name'] }}

      # Print CPU model before running the tests (this can be useful for
      # debugging purposes)
      - run: grep 'model name' /proc/cpuinfo | head -1

      # Test schedulers
      - run: meson compile -C build test_sched_${{ matrix.scheduler['name'] }}
      # this is where errors we want logs on start occurring, so always generate debug info and save logs
        if: always()
      # Stress schedulers
      - uses: cytopia/shell-command-retry-action@v0.1.2
        name: stress test
        if: always()
        with:
          retries: 3
          command: meson compile -C build stress_tests_${{ matrix.scheduler['name'] }}
      - run: meson compile -C build veristat_${{ matrix.scheduler['name'] }}
        if: always()
      - run: sudo cat /var/log/dmesg > host-dmesg.ci.log
        if: always()
      - run: mkdir -p ./log_save/
        if: always()
      # no symlink following here (to avoid cycle`s)
      - run: sudo find '/home/runner/' -iname '*.ci.log' -exec mv {} ./log_save/ \;
        if: always()
      - name: Set artifact name
        if: always()
        run: |
          KERNEL_SUFFIX=""
          if [ -n "${{ matrix.scheduler.kernel }}" ]; then
            KERNEL_CLEAN=$(echo "${{ matrix.scheduler.kernel }}" | tr '/' '_')
            KERNEL_SUFFIX="_${KERNEL_CLEAN}"
          fi
          echo "ARTIFACT_NAME=${{ matrix.scheduler['name'] }}${{ matrix.scheduler['flags'] }}${KERNEL_SUFFIX}_logs_${{ github.run_id }}_${{ github.run_attempt }}" >> $GITHUB_ENV
      - name: upload debug logs, bpftrace, veristat, dmesg, etc.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./log_save/*.ci.log
          # it's all txt files w/ 90 day retention, lets be nice.
          compression-level: 9

  all-success:
    runs-on: ${{ github.repository_owner == 'sched-ext' && fromJSON('[ "self-hosted", "linux", "x64" ]') || 'ubuntu-latest' }}
    needs: integration-test
    if: always()
    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.integration-test.result }}" != "success" ]]; then
            echo "Integration tests failed or were cancelled"
            exit 1
          fi
          echo "All integration tests passed successfully"
