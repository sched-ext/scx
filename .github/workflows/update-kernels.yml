name: update-kernels
on:
  workflow_dispatch:
  schedule:
    - cron: '23 3 * * *'

jobs:
  list-kernels:
    runs-on: ${{ github.repository_owner == 'sched-ext' && fromJSON('[ "self-hosted", "linux", "x64" ]') || 'ubuntu-latest' }}
    outputs:
      matrix: ${{ steps.output.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: ./.github/actions/install-nix
        with:
          cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Load dependencies
        run: nix run ./.github/include#nix-develop-gha -- ./.github/include#gha-update-kernels

      - name: List kernels
        id: output
        run: |
          matrix=$(jq -c 'keys' kernel-versions.json)
          echo $matrix
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  update-kernels:
    runs-on: ${{ github.repository_owner == 'sched-ext' && fromJSON('[ "self-hosted", "linux", "x64" ]') || 'ubuntu-latest' }}
    needs: list-kernels
    strategy:
      matrix:
        version: ${{ fromJson(needs.list-kernels.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN_FOR_UPDATES }}

      - name: Install Nix
        uses: ./.github/actions/install-nix
        with:
          cachix-auth-token: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Load dependencies
        run: nix run ./.github/include#nix-develop-gha -- ./.github/include#gha-update-kernels

      - name: Update kernel
        run: |
          git config --global user.email "ci-bot@sched-ext.com"
          git config --global user.name "sched-ext CI Bot"

          INITIAL_COMMIT=$(git rev-parse HEAD)

          git switch -c "deps/kernel/${{ matrix.version }}"
          nix run ./.github/include#update-kernels -- ${{ matrix.version }}

          FINAL_COMMIT=$(git rev-parse HEAD)
          if [ "$INITIAL_COMMIT" != "$FINAL_COMMIT" ]; then
            echo 'modified=true' >> $GITHUB_ENV
          fi

      - name: Open PR
        if: env.modified == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_UPDATES }}
        run: |
          # we own these branches, force push is fine
          git push --force origin "HEAD:deps/kernel/${{ matrix.version }}"

          PR_IDS=$(gh pr list --head $(git rev-parse --abbrev-ref HEAD) --json id)
          if echo $PR_IDS | jq -e '. == []'; then
            gh pr create --fill
          else
            echo "PR already exists, skipping creation."
          fi
          gh pr merge --auto
